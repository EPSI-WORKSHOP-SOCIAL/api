generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Member {
    id     String @id @default(uuid())
    userId String @unique

    CollectionsOfMembers CollectionsOfMembers[]
    memberCollections    MemberCollection[]
    checks               Check[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
}

model Collection {
    id                String  @id @default(uuid())
    name              String
    brand             String
    hasNoNativeChecks Boolean @default(false)
    imagePath         String?

    imageId String?
    image   Image?  @relation(fields: [imageId], references: [id], onDelete: Cascade)

    CollectionsOfMembers CollectionsOfMembers[]
    memberCollections    MemberCollection[]
    nativeCollections    NativeCollection[]
    nativeChecks         NativeCheck[]
    checks               Check[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MemberCollection {
    id String @id @default(uuid())

    memberId String
    member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

    collectionId String
    collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([memberId])
    @@index([collectionId])
}

model NativeCollection {
    id String @id @default(uuid())

    collectionId String
    collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([collectionId])
}

model CollectionsOfMembers {
    memberId String
    member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

    collectionId String
    collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

    addedAt DateTime @default(now())

    @@id([memberId, collectionId])
}

model Check {
    penNumber String

    quantity    Int     @default(1)
    description String? @db.Text
    hexaColor   String?
    isEndOfLife Boolean @default(false)

    memberId String
    member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

    collectionId String
    collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([memberId, collectionId, penNumber])
    @@index([memberId])
    @@index([collectionId])
}

model NativeCheck {
    id String @id @default(uuid())

    penNumber String

    collectionId String
    collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([collectionId])
}

model Image {
    id String @id @default(uuid())

    path     String
    blurhash String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    collections Collection[]
}
